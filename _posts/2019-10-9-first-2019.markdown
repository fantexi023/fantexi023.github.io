---
layout:     post
title:      "Welcome to 牛牛爸 Blog"
subtitle:   " \"Hello World, Hello Blog\""
date:       2019-10-9 12:00:00
author:     "fantexi023"
header-img: "img/post-bg-2015.jpg"
tags:
    - 生活
---

> “Yeah It's on. ”


**6.1 ADTs: Abstract Data Types**

>什么是ADTs

一些数据和对这些数据进行的操作的集合。比如说文件和文件的增删改查操作；

>ADTs是类的基础

类 = ADTs + 继承 + 多态

>ADTs的益处

* 可以隐藏实现细节
* 改动不会影响到整个程序
* 易于提高性能
* 程序更具有自我说明性
* 可以像在现实世界中操作实体一样，而不用在底层实现上操作它

>使用原则

* 把常见的底层数据类型创建为ADTs, 而不再使用底层数据类型
* 不要让ADT依赖于其存储介质
* 一致性抽象，即对外展示一致的抽象层次


* * *

**6.2 良好的类接口**

>前言

创建高质量的类，最重要的就是创建一个好的接口。通过接口来展现合理的抽象，并确保细节被隐藏在抽象背后。

抽象是一种以简化的方式来看待复杂问题的能力。

>接口设计原则

* 能够展现出一种一致的抽象，保持很强的内聚性；（如果API很零散，那么需要考虑重新组织部分子程序到一个更专一的类中去）
* 对外展现一致的抽象层次：每一个类应该实现且仅实现一个ADT；
* 一定要理解类所实现的抽象是个什么东西；
* 把不相关的信息转移到其他类中，尤其是一个类中的不同子程序使用的数据源不同；
* 尽可能让接口可编程，而不是表达语义（特定调用顺序，不能为空等）；
* 同时考虑抽象性 & 内聚性；


* * *

**6.3 良好的封装**

>前言

概念性：封装 > 抽象
抽象通过一个模型来忽略实现细节，管理复杂度；
封装强制阻止他人看到实现细节；

>封装原则

* 尽可能地限制类和成员的可访问性
* 不要公开暴露成员数据
* 


